// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  employee     Employee?
  manager      Manager?
  md           MD?
  
  // Notifications
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  @@map("users")
}

model Employee {
  id          String   @id @default(cuid())
  userId      String   @unique
  employeeId  String   @unique
  department  String
  position    String
  joinDate    DateTime
  profilePicture String?
  managerId   String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  manager     Manager? @relation("ManagerEmployees", fields: [managerId], references: [id])
  
  // Employee specific relations
  attendances      Attendance[]
  leaveRequests    LeaveRequest[]
  assignedTasks    Task[]       @relation("AssignedTasks")
  createdTasks     Task[]       @relation("CreatedTasks")
  meetingParticipants MeetingParticipant[]
  monthlyReports   MonthlyReport[]
  
  @@map("employees")
}

model Manager {
  id         String   @id @default(cuid())
  userId     String   @unique
  managerId  String   @unique
  department String
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees  Employee[] @relation("ManagerEmployees")
  createdTasks Task[]   @relation("ManagerCreatedTasks")
  createdMeetings Meeting[] @relation("ManagerCreatedMeetings")
  approvedLeaves LeaveRequest[] @relation("ManagerApprovedLeaves")
  
  @@map("managers")
}

model MD {
  id       String @id @default(cuid())
  userId   String @unique
  mdId     String @unique
  
  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mds")
}

model Attendance {
  id           String          @id @default(cuid())
  employeeId   String
  date         DateTime
  checkInTime  DateTime?
  checkOutTime DateTime?
  status       AttendanceStatus
  workingHours Float?
  notes        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Relations
  employee     Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([employeeId, date])
  @@map("attendances")
}

model LeaveRequest {
  id           String      @id @default(cuid())
  employeeId   String
  startDate    DateTime
  endDate      DateTime
  type         LeaveType
  reason       String
  status       LeaveStatus
  appliedDate  DateTime    @default(now())
  approvedBy   String?
  approvedDate DateTime?
  rejectedBy   String?
  rejectedDate DateTime?
  notes        String?
  
  // Relations
  employee     Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approvedByManager Manager? @relation("ManagerApprovedLeaves", fields: [approvedBy], references: [id])
  
  @@map("leave_requests")
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String?
  priority      Priority
  status        TaskStatus
  approvalStatus ApprovalStatus @default(PENDING)
  dueDate       DateTime?
  assignedToId  String?
  createdById   String
  managerId     String?
  isUserAdded   Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  assignedTo    Employee?  @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: Cascade)
  createdBy     Employee   @relation("CreatedTasks", fields: [createdById], references: [id], onDelete: Cascade)
  manager       Manager?   @relation("ManagerCreatedTasks", fields: [managerId], references: [id])
  
  @@map("tasks")
}

model Meeting {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  type        MeetingType
  status      MeetingStatus @default(SCHEDULED)
  createdById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  createdBy   Manager?  @relation("ManagerCreatedMeetings", fields: [createdById], references: [id])
  participants MeetingParticipant[]
  
  @@map("meetings")
}

model MeetingParticipant {
  id         String    @id @default(cuid())
  meetingId  String
  employeeId String
  status     ParticipantStatus @default(INVITED)
  
  // Relations
  meeting    Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([meetingId, employeeId])
  @@map("meeting_participants")
}

model MonthlyReport {
  id           String   @id @default(cuid())
  employeeId   String
  month        Int
  year         Int
  totalTasks   Int      @default(0)
  completedTasks Int    @default(0)
  pendingTasks Int      @default(0)
  performanceScore Float?
  feedback     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([employeeId, month, year])
  @@map("monthly_reports")
}

model Notification {
  id         String           @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  senderId   String?
  receiverId String
  createdAt  DateTime         @default(now())
  
  // Relations
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id])
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Holiday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  description String?
  
  @@map("holidays")
}

// Enums
enum UserRole {
  EMPLOYEE
  MANAGER
  MD
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  LEAVE
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  EMERGENCY
  MATERNITY
  PATERNITY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MeetingType {
  TEAM
  ONE_ON_ONE
  PROJECT
  COMPANY_WIDE
  CLIENT
}

enum MeetingStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  INVITED
  ACCEPTED
  DECLINED
  MAYBE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_APPROVED
  TASK_REJECTED
  MEETING_SCHEDULED
  MEETING_CANCELLED
  LEAVE_APPROVED
  LEAVE_REJECTED
  ATTENDANCE_REMINDER
  GENERAL
}
